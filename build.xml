<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project>
<project name="acodec" default="all" xmlns:ac="antlib:net.sf.antcontrib">

	<filter token="project.artifactId" value="${project.artifactId}" />
	<filter token="project.name" value="${project.name}" />
	<filter token="project.url" value="${project.url}" />

	<property name="windows.jarFileName" value="${windows.build.finalName}.jar" />
	<property name="linux.jarFileName" value="${linux.build.finalName}.jar" />
	<property name="macos.jarFileName" value="${macos.build.finalName}.jar" />
	<filter token="windows.jarFileName" value="${windows.jarFileName}" />
	<filter token="linux.jarFileName" value="${linux.jarFileName}" />
	<filter token="macos.jarFileName" value="${macos.jarFileName}" />
	<filter token="mainClass" value="${mainClass}" />

	<property file="build.properties" />

	<filter token="vm.initialHeapSize" value="${vm.initialHeapSize}" />
	<filter token="vm.maxHeapSize" value="${vm.maxHeapSize}" />

	<filter token="console.vm.initialHeapSize" value="${console.vm.initialHeapSize}" />
	<filter token="console.vm.maxHeapSize" value="${console.vm.maxHeapSize}" />

	<target name="clean">
		<delete dir="${build.directory}" />
	</target>

	<target name="jars">
		<ac:for trim="true" list="${build.platforms.all}" param="platform">
			<ac:sequential>
				<copy todir="${build.packagesDirectory}/@{platform}/app">
					<fileset dir="${project.build.basedir}/@{platform}">
						<include name="*.jar" />
					</fileset>
				</copy>
				<copy todir="${build.packagesDirectory}/@{platform}/app/${dependencies.directory}">
					<fileset dir="${project.build.basedir}/@{platform}/${dependencies.directory}">
						<include name="*.jar" />
					</fileset>
				</copy>
			</ac:sequential>
		</ac:for>
	</target>

	<target name="config">
		<ac:for trim="true" list="${build.platforms.windows}" param="platform">
			<ac:sequential>
				<copy quiet="true" file="${build.configDirectory}/${project.artifactId}.cfg" tofile="${build.packagesDirectory}/@{platform}/config/${windows.cfgFileName}" failonerror="false" />
				<copy quiet="true" todir="${build.packagesDirectory}/@{platform}/config" includeemptydirs="false" failonerror="false">
					<fileset dir="${build.configDirectory}" excludes="${project.artifactId}.cfg" />
				</copy>
			</ac:sequential>
		</ac:for>
		<ac:for trim="true" list="${build.platforms.linux}" param="platform">
			<ac:sequential>
				<copy quiet="true" file="${build.configDirectory}/${project.artifactId}.cfg" tofile="${build.packagesDirectory}/@{platform}/app/.${project.artifactId}/${linux.cfgFileName}" failonerror="false" />
				<copy quiet="true" todir="${build.packagesDirectory}/@{platform}/app/.${project.artifactId}" includeemptydirs="false" failonerror="false">
					<fileset dir="${build.configDirectory}" excludes="${project.artifactId}.cfg" />
				</copy>
			</ac:sequential>
		</ac:for>
		<ac:for trim="true" list="${build.platforms.macos}" param="platform">
			<ac:sequential>
				<copy quiet="true" file="${build.configDirectory}/${project.artifactId}.cfg" tofile="${build.packagesDirectory}/@{platform}/config/${macos.cfgFileName}" failonerror="false" />
				<copy quiet="true" todir="${build.packagesDirectory}/@{platform}/config" includeemptydirs="false" failonerror="false">
					<fileset dir="${build.configDirectory}" excludes="${project.artifactId}.cfg" />
				</copy>
			</ac:sequential>
		</ac:for>
	</target>

	<target name="scripts">
		<ac:for trim="true" list="${build.platforms.windows}" param="platform">
			<ac:sequential>
				<copy todir="${build.packagesDirectory}/@{platform}/app" failonerror="false" filtering="true">
					<fileset dir="${build.scriptSourceDirectory}">
						<include name="*.bat" />
					</fileset>
				</copy>
			</ac:sequential>
		</ac:for>
		<ac:for trim="true" list="${build.platforms.linux}" param="platform">
			<ac:sequential>
				<copy todir="${build.packagesDirectory}/@{platform}/app" failonerror="false" filtering="true">
					<fileset dir="${build.scriptSourceDirectory}">
						<include name="*.sh" />
					</fileset>
				</copy>
			</ac:sequential>
		</ac:for>
		<ac:for trim="true" list="${build.platforms.macos}" param="platform">
			<ac:sequential>
				<copy todir="${build.packagesDirectory}/@{platform}/scripts" failonerror="false" filtering="true">
					<fileset dir="${build.scriptSourceDirectory}">
						<include name="*.command" />
					</fileset>
				</copy>
			</ac:sequential>
		</ac:for>
	</target>

	<fileset id="docs" dir="">
		<include name="README*" />
		<include name="LICENSE*" />
		<include name="NOTICE*" />
	</fileset>

	<target name="docs">
		<ac:for trim="true" list="${build.platforms.windows},${build.platforms.linux}" param="platform">
			<ac:sequential>
				<copy todir="${build.packagesDirectory}/@{platform}/app">
					<fileset refid="docs" />
				</copy>
			</ac:sequential>
		</ac:for>
		<ac:for trim="true" list="${build.platforms.macos}" param="platform">
			<ac:sequential>
				<copy todir="${build.packagesDirectory}/@{platform}/docs">
					<fileset refid="docs" />
				</copy>
			</ac:sequential>
		</ac:for>
	</target>

	<target name="licenses">
		<fileset id="licenses" dir="${3rdparty.license.directory}" />

		<ac:for trim="true" list="${build.platforms.windows},${build.platforms.linux}" param="platform">
			<ac:sequential>
				<copy todir="${build.packagesDirectory}/@{platform}/app/${3rdparty.license.directory}">
					<fileset refid="licenses" />
				</copy>
			</ac:sequential>
		</ac:for>
		<ac:for trim="true" list="${build.platforms.macos}" param="platform">
			<ac:sequential>
				<copy todir="${build.packagesDirectory}/@{platform}/docs/${3rdparty.license.directory}">
					<fileset refid="licenses" />
				</copy>
			</ac:sequential>
		</ac:for>
	</target>

	<target name="icons">
		<ac:for trim="true" list="${build.platforms.linux}" param="platform">
			<ac:sequential>
				<copy todir="${build.packagesDirectory}/@{platform}/app/${linux.iconFileDir}" failonerror="false">
					<fileset dir="${icons.directory}/app" />
				</copy>
			</ac:sequential>
		</ac:for>
		<ac:for trim="true" list="${build.platforms.macos}" param="platform">
			<ac:sequential>
				<copy file="${icons.directory}/app.icns" tofile="${build.packagesDirectory}/@{platform}/app/${macos.iconFileName}" failonerror="false" />
			</ac:sequential>
		</ac:for>
	</target>

	<target name="dist-macos">
		<taskdef name="jarbundler" classname="com.ultramixer.jarbundler.JarBundler" classpath="${jarBundler.directory}/jarbundler-core-3.3.0.jar" />

		<ac:for trim="true" list="${build.platforms.macos}" param="platform" parallel="${build.parallel}">
			<ac:sequential>
				<mkdir dir="${build.packagesDirectory}/@{platform}/bundle" />
				<jarbundler vmoptions="${macos.vmoptions}" dir="${build.packagesDirectory}/@{platform}/bundle" name="${project.name}" mainclass="${mainClass}" startonmainthread="true" version="${project.version}" icon="${build.packagesDirectory}/@{platform}/app/${macos.iconFileName}" usejavaxkey="true" jvmversion="${maven.compiler.target}+" stubfile="${jarBundler.directory}/universalJavaApplicationStub" highresolutioncapable="true">
					<jarfileset dir="${build.packagesDirectory}/@{platform}/app" includes="**/*.jar" />
				</jarbundler>

				<copy quiet="true" todir="${build.packagesDirectory}/@{platform}/bundle/${project.name}.app/Contents/Library/Preferences" failonerror="false">
					<fileset dir="${build.packagesDirectory}/@{platform}/config" />
				</copy>

				<copy todir="${build.packagesDirectory}/@{platform}/bundle/${project.name}.app/Contents/SharedSupport">
					<fileset dir="${build.packagesDirectory}/@{platform}/docs" />
				</copy>

				<copy quiet="true" todir="${build.packagesDirectory}/@{platform}/bundle/${project.name}.app/Contents/Resources/Java" failonerror="false" filtering="true">
					<fileset dir="${build.packagesDirectory}/@{platform}/scripts" />
				</copy>

				<tar destfile="${build.distDirectory}/${project.artifactId}-${project.version}-@{platform}-app.tar.gz" compression="gzip">
					<tarfileset dir="${build.packagesDirectory}/@{platform}/bundle" filemode="755">
						<include name="${project.name}.app/Contents/MacOS/*" />
						<include name="${project.name}.app/Contents/Resources/Java/*.command" />
					</tarfileset>
					<tarfileset dir="${build.packagesDirectory}/@{platform}/bundle">
						<exclude name="${project.name}.app/Contents/MacOS/*" />
						<exclude name="${project.name}.app/Contents/Resources/Java/*.command" />
					</tarfileset>
				</tar>
			</ac:sequential>
		</ac:for>
	</target>

	<target name="dist-linux">
		<ac:for trim="true" list="${build.platforms.linux}" param="platform" parallel="${build.parallel}">
			<ac:sequential>
				<tar destfile="${build.distDirectory}/${project.artifactId}-${project.version}-@{platform}-bin.tar.gz" compression="gzip">
					<tarfileset dir="${build.packagesDirectory}/@{platform}/app" prefix="${project.artifactId}" filemode="755">
						<include name="*.jar" />
						<include name="*.sh" />
					</tarfileset>
					<tarfileset dir="${build.packagesDirectory}/@{platform}/app" prefix="${project.artifactId}">
						<exclude name="*.jar" />
						<exclude name="*.sh" />
					</tarfileset>
				</tar>
			</ac:sequential>
		</ac:for>
	</target>

	<target name="dist-windows">
		<echo level="info" message="os.family: ${os.family}" />
		<echo level="info" message="os.name: ${os.name}" />
		<echo level="info" message="os.arch: ${os.arch}" />
		<echo level="info" message="os.version: ${os.version}" />

		<taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask" classpath="${launch4j.directory}/launch4j.jar:${launch4j.directory}/lib/xstream.jar" />
		<condition property="launch4j.bindir" value="${launch4j.directory}/bin/win32">
			<and>
				<os family="windows" />
				<available file="${launch4j.directory}/bin/win32" type="dir" />
			</and>
		</condition>
		<condition property="launch4j.bindir" value="${launch4j.directory}/bin/macosx-x86">
			<and>
				<os family="mac" />
				<available file="${launch4j.directory}/bin/macosx-x86" type="dir" />
			</and>
		</condition>
		<condition property="launch4j.bindir" value="${launch4j.directory}/bin/linux">
			<and>
				<os name="linux" />
				<os arch="x86" />
				<available file="${launch4j.directory}/bin/linux" type="dir" />
			</and>
		</condition>
		<condition property="launch4j.bindir" value="${launch4j.directory}/bin/linux-x64">
			<and>
				<os name="linux" />
				<os arch="amd64" />
				<available file="${launch4j.directory}/bin/linux-x64" type="dir" />
			</and>
		</condition>
		<condition property="launch4j.bindir" value="${launch4j.directory}/bin/linux-armhf">
			<and>
				<os name="linux" />
				<os arch="arm" />
				<available file="${launch4j.directory}/bin/linux-armhf" type="dir" />
			</and>
		</condition>
		<condition property="launch4j.bindir" value="${launch4j.directory}/bin/linux-aarch64">
			<and>
				<os name="linux" />
				<os arch="aarch64" />
				<available file="${launch4j.directory}/bin/linux-aarch64" type="dir" />
			</and>
		</condition>

		<echo level="info" message="launch4j.bindir: ${launch4j.bindir}" />

		<condition property="wine.failonerror" else="false">
			<isfalse value="${ignoreWineErrors}" />
		</condition>
		<condition property="wine.failifexecutionfails" else="false">
			<isfalse value="${ignoreWineErrors}" />
		</condition>

		<chmod perm="+x" file="${launch4j.bindir}/ld" failonerror="false" failifexecutionfails="false" ignoremissing="true" />
		<chmod perm="+x" file="${launch4j.bindir}/windres" failonerror="false" failifexecutionfails="false" ignoremissing="true" />

		<launch4j bindir="${launch4j.bindir}">
			<config outfile="${build.packagesDirectory}/win32-win32-x86/app/${windows.exeFileName}" jarpath="${windows.jarFileName}" headertype="gui" dontwrapjar="${launch4j.dontWrapJar}" stayalive="${launch4j.stayAlive}" restartoncrash="${launch4j.restartOnCrash}" priority="${launch4j.priority}" errtitle="${launch4j.errTitle}" chdir="." icon="${icons.directory}/app.ico">
				<singleInstance mutexname="${mainClass}" windowtitle="${project.name}" />
				<jre runtimebits="32" minversion="${maven.compiler.target}.0" jdkpreference="${launch4j.jdkPreference}" initialheapsize="${vm.initialHeapSize}" maxheapsize="${vm.maxHeapSize}">
					<opt>-Dit.albertus.acodec.ACodec.main.mode=gui</opt>
				</jre>
				<versionInfo fileversion="${project.version}.0" txtfileversion="${project.version}" filedescription="${project.name}" copyright="${launch4j.copyright}" productversion="${project.version}.0" txtproductversion="${project.version}" productname="${project.name}" internalname="${project.artifactId}" originalfilename="${windows.exeFileName}" companyname="${launch4j.companyName}" />
			</config>
		</launch4j>
		<launch4j bindir="${launch4j.bindir}">
			<config outfile="${build.packagesDirectory}/win32-win32-x86/app/${project.name}.exe" jarpath="${windows.jarFileName}" headertype="console" dontwrapjar="${launch4j.dontWrapJar}" stayalive="${launch4j.stayAlive}" restartoncrash="${launch4j.restartOnCrash}" priority="${launch4j.priority}" errtitle="${launch4j.errTitle}" chdir=".">
				<jre minversion="${maven.compiler.target}.0" jdkpreference="${launch4j.jdkPreference}" initialheapsize="${console.vm.initialHeapSize}" maxheapsize="${console.vm.maxHeapSize}">
					<opt>-Dit.albertus.acodec.ACodec.main.mode=console</opt>
				</jre>
				<versionInfo fileversion="${project.version}.0" txtfileversion="${project.version}" filedescription="${project.name}" copyright="${launch4j.copyright}" productversion="${project.version}.0" txtproductversion="${project.version}" productname="${project.name}" internalname="${project.name}" originalfilename="${project.name}.exe" companyname="${launch4j.companyName}" />
			</config>
		</launch4j>

		<launch4j bindir="${launch4j.bindir}">
			<config outfile="${build.packagesDirectory}/win32-win32-x86_64/app/${windows.exeFileName}" jarpath="${windows.jarFileName}" headertype="gui" dontwrapjar="${launch4j.dontWrapJar}" stayalive="${launch4j.stayAlive}" restartoncrash="${launch4j.restartOnCrash}" priority="${launch4j.priority}" errtitle="${launch4j.errTitle}" chdir="." icon="${icons.directory}/app.ico">
				<singleInstance mutexname="${mainClass}" windowtitle="${project.name}" />
				<jre runtimebits="64" minversion="${maven.compiler.target}.0" jdkpreference="${launch4j.jdkPreference}" initialheapsize="${vm.initialHeapSize}" maxheapsize="${vm.maxHeapSize}">
					<opt>-Dit.albertus.acodec.ACodec.main.mode=gui</opt>
				</jre>
				<versionInfo fileversion="${project.version}.0" txtfileversion="${project.version}" filedescription="${project.name}" copyright="${launch4j.copyright}" productversion="${project.version}.0" txtproductversion="${project.version}" productname="${project.name}" internalname="${project.artifactId}" originalfilename="${windows.exeFileName}" companyname="${launch4j.companyName}" />
			</config>
		</launch4j>
		<launch4j bindir="${launch4j.bindir}">
			<config outfile="${build.packagesDirectory}/win32-win32-x86_64/app/${project.name}.exe" jarpath="${windows.jarFileName}" headertype="console" dontwrapjar="${launch4j.dontWrapJar}" stayalive="${launch4j.stayAlive}" restartoncrash="${launch4j.restartOnCrash}" priority="${launch4j.priority}" errtitle="${launch4j.errTitle}" chdir=".">
				<jre minversion="${maven.compiler.target}.0" jdkpreference="${launch4j.jdkPreference}" initialheapsize="${console.vm.initialHeapSize}" maxheapsize="${console.vm.maxHeapSize}">
					<opt>-Dit.albertus.acodec.ACodec.main.mode=console</opt>
				</jre>
				<versionInfo fileversion="${project.version}.0" txtfileversion="${project.version}" filedescription="${project.name}" copyright="${launch4j.copyright}" productversion="${project.version}.0" txtproductversion="${project.version}" productname="${project.name}" internalname="${project.name}" originalfilename="${project.name}.exe" companyname="${launch4j.companyName}" />
			</config>
		</launch4j>

		<ac:for trim="true" list="${build.platforms.windows}" param="platform" parallel="${build.parallel}">
			<ac:sequential>
				<zip destfile="${build.distDirectory}/${project.artifactId}-${project.version}-@{platform}-bin.zip" level="9">
					<zipfileset dir="${build.packagesDirectory}/@{platform}/app" prefix="${project.name}" />
				</zip>
			</ac:sequential>
		</ac:for>

		<echo file="${build.packagesDirectory}/win32-win32-x86/setup.iss">
			[Setup]
			AppName=${project.name}
			AppVersion=${project.version}
			VersionInfoVersion=${project.version}
			AppId=${innoSetup.AppId.x86}
			AppPublisherURL=${innoSetup.AppPublisherURL}
			AppSupportURL=${innoSetup.AppSupportURL}
			AppUpdatesURL=${innoSetup.AppUpdatesURL}
			AppMutex=${mainClass}
			PrivilegesRequired=lowest
			PrivilegesRequiredOverridesAllowed=dialog
			DefaultDirName={autopf32}\${project.name}
			DefaultGroupName=${project.name}
			UninstallDisplayIcon={app}\${windows.exeFileName}
			Compression=lzma2
			SolidCompression=yes
			CloseApplications=no
			ArchitecturesAllowed=x86

			[Languages]
			Name: "English"; MessagesFile: "compiler:Default.isl"; LicenseFile: "app\LICENSE.txt"
			Name: "Italiano"; MessagesFile: "compiler:Languages\Italian.isl"; LicenseFile: "app\LICENSE.txt"

			[Run]
			Filename: "{app}\${windows.exeFileName}"; Description: "{cm:LaunchProgram,${project.name}}"; Flags: nowait postinstall skipifsilent

			[Tasks]
			Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
			;Name: "startupicon"; Description: "{cm:AutoStartProgram,${project.name}}"; GroupDescription: "{cm:AutoStartProgramGroupDescription}"; Flags: unchecked

			[Icons]
			Name: "{group}\${project.name}"; Filename: "{app}\${windows.exeFileName}"
			Name: "{group}\{cm:UninstallProgram,${project.name}}"; Filename: "{uninstallexe}"
			Name: "{autodesktop}\${project.name}"; Filename: "{app}\${windows.exeFileName}"; Tasks: desktopicon
			;Name: "{userstartup}\${project.name}"; Filename: "{app}\${windows.exeFileName}"; Tasks: startupicon

			[Files]
			Source: "app\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs
			Source: "config\*"; DestDir: "{userappdata}\${project.name}"; Flags: onlyifdoesntexist skipifsourcedoesntexist
			Source: "${dependencies.logFileName}"; DestDir: "{autoappdata}\${project.name}"; Flags: ignoreversion overwritereadonly uninsremovereadonly; Attribs: hidden readonly

			[Code]
			procedure CurStepChanged(CurStep: TSetupStep);
			var
				jarFileNames: TArrayOfString;
				i: Integer;
			begin
				if (CurStep = ssInstall) and (LoadStringsFromFile(ExpandConstant('{autoappdata}\${project.name}\${dependencies.logFileName}'), jarFileNames)) then
				begin
					for i := 0 to GetArrayLength(jarFileNames) - 1 do
						DeleteFile(ExpandConstant('{app}\${dependencies.directory}\' + jarFileNames[i]));
				end;
			end;
		</echo>

		<echo file="${build.packagesDirectory}/win32-win32-x86_64/setup.iss">
			[Setup]
			AppName=${project.name}
			AppVersion=${project.version}
			VersionInfoVersion=${project.version}
			AppId=${innoSetup.AppId.x64}
			AppPublisherURL=${innoSetup.AppPublisherURL}
			AppSupportURL=${innoSetup.AppSupportURL}
			AppUpdatesURL=${innoSetup.AppUpdatesURL}
			AppMutex=${mainClass}
			PrivilegesRequired=lowest
			PrivilegesRequiredOverridesAllowed=dialog
			DefaultDirName={autopf64}\${project.name}
			DefaultGroupName=${project.name}
			UninstallDisplayIcon={app}\${windows.exeFileName}
			Compression=lzma2
			SolidCompression=yes
			CloseApplications=no
			ArchitecturesAllowed=x64
			ArchitecturesInstallIn64BitMode=x64

			[Languages]
			Name: "English"; MessagesFile: "compiler:Default.isl"; LicenseFile: "app\LICENSE.txt"
			Name: "Italiano"; MessagesFile: "compiler:Languages\Italian.isl"; LicenseFile: "app\LICENSE.txt"

			[Run]
			Filename: "{app}\${windows.exeFileName}"; Description: "{cm:LaunchProgram,${project.name}}"; Flags: nowait postinstall skipifsilent

			[Tasks]
			Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
			;Name: "startupicon"; Description: "{cm:AutoStartProgram,${project.name}}"; GroupDescription: "{cm:AutoStartProgramGroupDescription}"; Flags: unchecked

			[Icons]
			Name: "{group}\${project.name}"; Filename: "{app}\${windows.exeFileName}"
			Name: "{group}\{cm:UninstallProgram,${project.name}}"; Filename: "{uninstallexe}"
			Name: "{autodesktop}\${project.name}"; Filename: "{app}\${windows.exeFileName}"; Tasks: desktopicon
			;Name: "{userstartup}\${project.name}"; Filename: "{app}\${windows.exeFileName}"; Tasks: startupicon

			[Files]
			Source: "app\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs
			Source: "config\*"; DestDir: "{userappdata}\${project.name}"; Flags: onlyifdoesntexist skipifsourcedoesntexist
			Source: "${dependencies.logFileName}"; DestDir: "{autoappdata}\${project.name}"; Flags: ignoreversion overwritereadonly uninsremovereadonly; Attribs: hidden readonly

			[Code]
			procedure CurStepChanged(CurStep: TSetupStep);
			var
				jarFileNames: TArrayOfString;
				i: Integer;
			begin
				if (CurStep = ssInstall) and (LoadStringsFromFile(ExpandConstant('{autoappdata}\${project.name}\${dependencies.logFileName}'), jarFileNames)) then
				begin
					for i := 0 to GetArrayLength(jarFileNames) - 1 do
						DeleteFile(ExpandConstant('{app}\${dependencies.directory}\' + jarFileNames[i]));
				end;
			end;
		</echo>

		<ac:for trim="true" list="${build.platforms.windows}" param="platform" parallel="${build.parallel}">
			<ac:sequential>
				<pathconvert pathsep="&#13;&#10;" property="dependencies.log.@{platform}">
					<fileset dir="${build.packagesDirectory}/@{platform}/app/${dependencies.directory}">
						<include name="*.jar" />
					</fileset>
					<mapper>
						<flattenmapper />
					</mapper>
				</pathconvert>

				<echo file="${build.packagesDirectory}/@{platform}/${dependencies.logFileName}">${dependencies.log.@{platform}}</echo>

				<exec osfamily="windows" executable="${innoSetup.directory}/ISCC.exe" failonerror="true">
					<arg value="${build.packagesDirectory}/@{platform}/setup.iss" />
					<arg value="/O${build.distDirectory}" />
					<arg value="/F${project.artifactId}-${project.version}-@{platform}-setup" />
				</exec>
				<exec osfamily="unix" executable="wine" failonerror="${wine.failonerror}" failifexecutionfails="${wine.failifexecutionfails}">
					<arg value="${innoSetup.directory}/ISCC.exe" />
					<arg value="${build.packagesDirectory}/@{platform}/setup.iss" />
					<arg value="/O${build.distDirectory}" />
					<arg value="/F${project.artifactId}-${project.version}-@{platform}-setup" />
				</exec>
			</ac:sequential>
		</ac:for>
	</target>

	<target name="dist" depends="jars, config, scripts, docs, licenses, icons, dist-linux, dist-macos, dist-windows" />

	<target name="virustotal">
		<property name="checksums.file" value="${build.directory}/checksums.md" />
		<property name="checksums.directory" value="${build.directory}/checksums" />
		<delete file="${checksums.file}" />
		<checksum algorithm="SHA-256" todir="${checksums.directory}" forceoverwrite="yes" fileext=".sha256" pattern="* {1}&#13;&#10;[`{0}`](https://www.virustotal.com/it/file/{0}/analysis/)">
			<fileset dir="${build.directory}">
				<include name="*" />
			</fileset>
		</checksum>
		<echo file="${checksums.file}" message="### Checksums SHA-256&#13;&#10;" />
		<concat destfile="${checksums.file}" append="true">
			<fileset dir="${checksums.directory}" />
		</concat>
		<loadfile property="checksums.file.contents" srcFile="${checksums.file}" />
		<echo level="info" message="${checksums.file.contents}" />
	</target>

	<target name="all" depends="clean, dist, virustotal" />

</project>
